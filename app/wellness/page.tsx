\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ArrowLeft, Brain, Droplet } from \"lucide-react\";\nimport FloatingBubbles from \"../floating-bubbles\";\nimport { useHydration } from \"@/contexts/hydration-context\";\n\ninterface WellnessScreenProps {\n  onBack?: () => void;\n}\n\nconst symptomCategories = [\n  {\n    name: \"Thirst and Oral\",\n    symptoms: [\n      { id: \"increased_thirst\", label: \"Increased thirst\", severity: \"Mild\" },\n      { id: \"dry_mouth\", label: \"Dry mouth\", severity: \"Mild\" },\n      { id: \"sticky_saliva\", label: \"Sticky saliva\", severity: \"Moderate\" },\n      { id: \"cracked_lips\", label: \"Cracked lips\", severity: \"Severe\" },\n    ],\n  },\n  {\n    name: \"Urinary\",\n    symptoms: [\n      { id: \"dark_urine\", label: \"Dark urine\", severity: \"Moderate\" },\n      { id: \"reduced_urination\", label: \"Reduced urination\", severity: \"Moderate\" },\n      { id: \"no_urination\", label: \"No urination\", severity: \"Severe\" },\n    ],\n  },\n  {\n    name: \"Skin and Mucous Membrane\",\n    symptoms: [\n      { id: \"dry_skin\", label: \"Dry skin\", severity: \"Mild\" },\n      { id: \"poor_skin_turgor\", label: \"Poor skin turgor\", severity: \"Moderate\" },\n      { id: \"sunken_eyes\", label: \"Sunken eyes\", severity: \"Severe\" },\n    ],\n  },\n  {\n    name: \"Neurological and Cognitive\",\n    symptoms: [\n      { id: \"fatigue\", label: \"Fatigue\", severity: \"Mild\" },\n      { id: \"dizziness\", label: \"Dizziness\", severity: \"Moderate\" },\n      { id: \"confusion\", label: \"Confusion\", severity: \"Severe\" },\n    ],\n  },\n];\n\nexport default function WellnessScreen({ onBack }: WellnessScreenProps) {\n  const { state, updateWellnessState } = useHydration();\n  const [selectedSymptoms, setSelectedSymptoms] = useState<string[]>(state.wellnessState?.reportedSymptoms || []);\n  const prevSymptomsRef = useRef<string[]>(selectedSymptoms);\n\n  const handleSymptomToggle = (symptomId: string) => {\n    setSelectedSymptoms((prev) =>\n      prev.includes(symptomId) ? prev.filter((id) => id !== symptomId) : [...prev, symptomId],\n    );\n  };\n\n  useEffect(() => {\n    if (JSON.stringify(prevSymptomsRef.current) === JSON.stringify(selectedSymptoms)) {\n      return;\n    }\n    prevSymptomsRef.current = selectedSymptoms;\n    const dehydrationLevel = calculateDehydrationLevel(selectedSymptoms);\n    updateWellnessState(selectedSymptoms, dehydrationLevel);\n  }, [selectedSymptoms]);\n\n  const calculateDehydrationLevel = (symptoms: string[]): \"None\" | \"Mild\" | \"Moderate\" | \"Severe\" => {\n    const severeSymptoms = [\"confusion\", \"no_urination\", \"sunken_eyes\"];\n    const moderateSymptoms = [\"dark_urine\", \"reduced_urination\", \"poor_skin_turgor\", \"sticky_saliva\", \"dizziness\"];\n    const mildSymptoms = [\"increased_thirst\", \"dry_mouth\", \"dry_skin\", \"fatigue\", \"cracked_lips\"];\n    if (symptoms.some((s) => severeSymptoms.includes(s))) return \"Severe\";\n    if (symptoms.some((s) => moderateSymptoms.includes(s))) return \"Moderate\";\n    if (symptoms.some((s) => mildSymptoms.includes(s))) return \"Mild\";\n    return \"None\";\n  };\n\n  const dehydrationLevel = state.wellnessState?.dehydrationLevel || \"None\";\n\n  return (\n    <div className=\"h-full w-full bg-gradient-to-b from-blue-400 to-blue-600 flex flex-col\">\n      <FloatingBubbles count={10} maxSize={30} />\n      {/* Header */}\n      <motion.div\n        className=\"flex items-center p-4 z-10\"\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n      >\n        {onBack && (\n          <button\n            className=\"w-10 h-10 rounded-full bg-white/20 backdrop-blur-sm flex items-center justify-center\"\n            onClick={onBack}\n          >\n            <ArrowLeft className=\"w-5 h-5 text-white\" />\n          </button>\n        )}\n        <h1 className=\"text-2xl font-light text-white ml-4\">Wellness Finder</h1>\n      </motion.div>\n      {/* Main content */}\n      <div className=\"flex-1 overflow-y-auto p-6 z-10\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"space-y-6\"\n        >\n          <div className=\"bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl p-5\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-10 h-10 rounded-full bg-blue-400/30 flex items-center justify-center mr-3\">\n                <Brain className=\"w-5 h-5 text-white\" />\n              </div>\n              <h2 className=\"text-white text-lg font-medium\">How are you feeling?</h2>\n            </div>\n            <p className=\"text-white/80 text-sm\">\n              Select any symptoms you're experiencing to get personalized hydration advice.\n            </p>\n          </div>\n          {symptomCategories.map((category) => (\n            <motion.div\n              key={category.name}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl p-5\"\n            >\n              <h3 className=\"text-lg font-medium text-white mb-3\">{category.name}</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                {category.symptoms.map((symptom) => (\n                  <motion.button\n                    key={symptom.id}\n                    className={`flex items-center space-x-3 p-3 rounded-lg text-left ${\n                      selectedSymptoms.includes(symptom.id)\n                        ? \"bg-blue-600/50 border border-white/40\"\n                        : \"bg-white/10 border border-white/20\"\n                    }`}\n                    whileHover={{ scale: 1.02, backgroundColor: \"rgba(255, 255, 255, 0.2)\" }}\n                    whileTap={{ scale: 0.98 }}\n                    onClick={() => handleSymptomToggle(symptom.id)}\n                  >\n                    <div\n                      className={`w-3 h-3 rounded-full ${\n                        symptom.severity === \"Mild\"\n                          ? \"bg-orange-400\"\n                          : symptom.severity === \"Moderate\"\n                          ? \"bg-orange-500\"\n                          : \"bg-purple-500\"\n                      }`}\n                    />\n                    <span className={`text-sm font-medium text-white`}>{symptom.label}</span>\n                  </motion.button>\n                ))}\n              </div>\n            </motion.div>\n          ))}\n          <AnimatePresence>\n            {dehydrationLevel !== \"None\" && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                className={`bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl p-5 ${\n                  dehydrationLevel === \"Mild\"\n                    ? \"border-orange-400/50\"\n                    : dehydrationLevel === \"Moderate\"\n                    ? \"border-orange-500/50\"\n                    : \"border-purple-500/50\"\n                }`}\n              >\n                <div className=\"flex items-center mb-3\">\n                  <div className=\"w-10 h-10 rounded-full bg-blue-400/30 flex items-center justify-center mr-3\">\n                    <Droplet className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-medium text-white\">Dehydration Level: {dehydrationLevel}</h3>\n                    <p className=\"text-white/80 text-sm\">\n                      {dehydrationLevel === \"Mild\" && \"Consider increasing your water intake.\"}\n                      {dehydrationLevel === \"Moderate\" && \"You should increase your fluid intake immediately.\"}\n                      {dehydrationLevel === \"Severe\" && \"Seek medical attention immediately.\"}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"mt-3 bg-white/10 rounded-lg p-3 text-white/90 text-sm\">\n                  {dehydrationLevel === \"Mild\" && (\n                    <ul className=\"list-disc pl-5 space-y-1\">\n                      <li>Drink a glass of water now</li>\n                      <li>Set reminders to drink regularly</li>\n                      <li>Include hydrating foods in your next meal</li>\n                    </ul>\n                  )}\n                  {dehydrationLevel === \"Moderate\" && (\n                    <ul className=\"list-disc pl-5 space-y-1\">\n                      <li>Drink water immediately</li>\n                      <li>Consider an electrolyte drink</li>\n                      <li>Rest and continue hydrating gradually</li>\n                      <li>Monitor your symptoms</li>\n                    </ul>\n                  )}\n                  {dehydrationLevel === \"Severe\" && (\n                    <ul className=\"list-disc pl-5 space-y-1\">\n                      <li>This is a medical concern</li>\n                      <li>Seek medical attention</li>\n                      <li>Sip water if possible while getting help</li>\n                      <li>Do not attempt to rapidly rehydrate on your own</li>\n                    </ul>\n                  )}\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n
